Welcome to Degree Planner, a full-stack application created mainly using MongoDB, Express, React.js and Node.js (MERN).We created this application because we found there was limited resources available for students in terms of degree planning.
First year students are often overwhelmed by the transition to post-secondary, and this app will help make this transition smoother. Degree Planner will also help students in upper years because it allows them to plan out other options if they desire.
The application provides an easy way for students to visualize potential paths  they can take in order to graduate. This reduces the tedious process of scheduling an appointment with a very busy academic counsellor.
To begin, users are shown a preview of what the application does, and are prompted to either login or signup.Once logged in, users are exposed to the 4 main pages of our application.
On the home page, users can visualize different paths for departments, and can view any prerequisites or additional course information. The tree graph shows the courses within a department and has functionality to filter certain years.
We used a public API in order to populate our data with courses from UBC.The next page is the departments page, that provides users with lots of data about all the department courses.
Users can click on courses to learn more about them, add courses to their course list and navigate through all required prerequisites. These courses are nicely placed into columns based on year to easily allow users to identify courses of interest to them.
 Each course page also links back to the official UBC academic calendar, directing users to further information if they require it.
Once users have added courses to their course list, the courses tab shows a succinct list of courses. Each course card provides the course code (with a link to its course page), the number of credits earned for the course, the course description and a quick way of removing the course from the users' course list
The profile page gives control to the user to change their credentials and academia preferences. Finally, users can logout to return back to the landing page. All changes made by users are stored in the database at each step, meaning that the users' data will remain intact even if the user encounters a problem or disconnects from the server